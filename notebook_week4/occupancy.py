# -*- coding: utf-8 -*-
"""Occupancy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zOXCJzaR6iKeC4-rmqfypMV0w-9YH2CJ

## **4.2 Occupant Behaviour**

Occupant behaviour is an essential boundary condition for building performance predictions, for example when occupants interact with the building and perform adaptive actions such as opening windows, using electrical appliances, changing their clothing and moving from place to place. Current research aims to develop models that adequately describe occupant behaviour, in order to understand and predict the impact of occupant behaviour on building energy performance.

This notebook treats two types of occupant behaviour modelling techniques:

*   Static schedules (a.k.a. deterministic profiles)
*   Stochastic models

**Learning objectives:**

*   Create an understanding of static occupant behaviour modelling.
*   Create an understanding of stochastic occupant behaviour modelling.
*   Grasp key differences between the two approaches.
*   Obtain insight into how inter-occupant diversity impacts energy demand.

#### **Example Scenario**

Let us introduce an example scenario in order to illustrate the concept of static and stochastic behaviour. The context of the example is as follows:

*   The location is one apartment space
*   Total occupancy is equal to one occupant
*   Occupant behaviour included in the example is presence, lighting energy use and appliance energy use

#### **1. Static Schedules**

Static schedules are mostly used in the design phase and can either be derived from standards or from observational data. An example of a
schedule is the diversity factor. Diversity factors are based on regular time intervals, where each time interval corresponds to a fraction of an established maximum value.
"""

# Run once to import.
import numpy as np
import matplotlib.pyplot as plt

# Here we generate an hourly occupancy schedule, occ_schedule, and a corresponding plug  
# and lighting load schedule, el_schedule. The schedules are static, such that every
# day is assumed to be identical.
hours = [1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 10, 11, 12, 13, 14, 15, 15, 16, 17, 17, 18, 19, 19, 20, 21, 21, 22, 23, 23, 24]
occ_schedule = [0,0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] #where the values represent the number of active occupants
el_schedule = [0,0, 0, 0, 0, 0, 0, 0, 0.15, 0.15, 0.15, 0, 0, 0, 0, 0, 0, 0.05, 0.05, 0.05, 0.2, 0.2, 0.2, 0.05, 0.05, 0.05, 0.025, 0.025, 0.025, 0, 0] #where the values represent the fraction of daily electricity use


# Let us set the yearly plug and lighting load at 4973 kWh. The daily consumption 
# is, therefore, approximately 13.6 kWh. We can now convert the schedule into an
# electricity consumption profile, daily_profile.
daily_profile = [13625 * i for i in el_schedule]
print(daily_profile)

# In order to visualize the occ_schedule, el_schedule and daily_profile, we plot them
# as a function of time.
fig = plt.figure(figsize=(20,8))
fig.add_subplot(311)
plt.plot(hours, occ_schedule, color='black', linewidth=0.5)
plt.xlabel('Time [hh]', fontsize = 10)
plt.ylabel('Number of active occupants', fontsize = 10)
plt.title('Daily Occupancy Profile')
plt.xlim(1,24)

fig.add_subplot(312)
plt.plot(hours, el_schedule, color='black', linewidth=0.5, linestyle='dotted')
plt.xlabel('Time [hh]', fontsize = 10)
plt.ylabel('Fraction of total daily use', fontsize = 10)
plt.title('Daily Schedule for Appliance and Lighting Use')
plt.xlim(1,24)

fig.add_subplot(313)
plt.plot(hours, daily_profile, color='black', linewidth=0.5, linestyle= 'dashed')
plt.xlabel('Time [hh]', fontsize = 10)
plt.ylabel('Electric power in W', fontsize = 10)
plt.title('Electricity profile for Appliance and Lighting Use')
plt.xlim(1,24)

plt.tight_layout()
plt.show()
plt.close()

"""#### **2. Stochastic Models**

Stochastic models differ from static schedules such that they depict occupancy as a probabilistic process. As a result, running the algorithm yields a different profile each time. The richardsonpy [1] module imported below uses a Markov chain to model occupant activity and the respective electrical consumption behaviour.

[1] https://github.com/RWTH-EBC/richardsonpy
"""

# Run to install richardsonpy and to import necessary libraries.
!pip install richardsonpy

import copy
import richardsonpy.classes.occupancy as occ
import richardsonpy.functions.change_resolution as cr
import richardsonpy.functions.load_radiation as loadrad
import richardsonpy.classes.electric_load as eload

# Here we display the function stoch_el_load which is defined in richardsonpy. 
# You can see that we set the number of occupants to 1 and the annual energy
# consumption to 4973 kWh, as we have done for the static schedule.

def stoch_el_load(do_plot=False, lower_limit=0, upper_limit=24, random_day_demand=False, return_loads=False, ):
    #  Total number of occupants in apartment
    nb_occ = 1

    timestep = 60  # in seconds

    #  Generate occupancy object (necessary as input for electric load gen.)
    occ_obj = occ.Occupancy(number_occupants=nb_occ)

    #  Get radiation (necessary for lighting usage calculation)
    (q_direct, q_diffuse) = loadrad.get_rad_from_try_path()

    #  Convert 3600 s timestep to given timestep
    q_direct = cr.change_resolution(q_direct, old_res=3600, new_res=timestep)
    q_diffuse = cr.change_resolution(q_diffuse, old_res=3600, new_res=timestep)

    #  Generate stochastic electric power object
    el_load_obj = eload.ElectricLoad(occ_profile=occ_obj.occupancy,
                                     total_nb_occ=nb_occ,
                                     q_direct=q_direct,
                                     q_diffuse=q_diffuse,
                                     annual_demand= 4973.0,
                                     timestep=timestep,
                                     do_normalization=True)

    #  Copy occupancy object, before changing its resolution
    #  (occ_obj.occupancy is the pointer to the occupancy profile array)
    occ_profile_copy = copy.copy(occ_obj.occupancy)

    #  Change resolution of occupancy object (to match
    #  resolution of el. load profile; necessary for plotting)
    occ_profile_copy = cr.change_resolution(values=occ_profile_copy,
                                            old_res=600,
                                            new_res=timestep)

    #  Calculate electrical energy in kWh
    energy_el_kwh = sum(el_load_obj.loadcurve) * timestep / (3600 * 1000)

    print('Annual electrical energy demand in kWh: ')
    print(energy_el_kwh)
    
    #  Generate time array for plotting
    timesteps = int(8760 * 3600 / timestep)  # Number of timesteps per day
    time_array = np.arange(0, timesteps * timestep, timestep) / 3600

    if do_plot:
        fig = plt.figure(figsize=(20,5))
        fig.add_subplot(211)
        plt.plot(time_array, occ_profile_copy[0:timesteps], color='black', linewidth=0.5)
        plt.xlabel('Timestep in hours', fontsize = 10)
        plt.ylabel('Number of active occupants', fontsize = 10)
        plt.title('Stochastic Occupancy Profile')
        plt.xlim([lower_limit, upper_limit])

        fig.add_subplot(212)
        plt.plot(time_array, el_load_obj.loadcurve[0:timesteps], color='black', linewidth=0.5)
        plt.xlabel('Timestep in hours', fontsize = 10)
        plt.ylabel('Electric power in W', fontsize = 10)
        plt.title('Stochastic Electricity Profile for Plug and Lighting Loads')
        plt.xlim([lower_limit, upper_limit])

        plt.tight_layout()
        plt.show()
        plt.close() 
        
    # In order to compare the stochastic profile to the static profile above, we
    # have to examine 1 day out of 365. To calculate the daily demand in kWh, we
    # set the condition random_day_demand to 'True', as shown in the next cell.    
    if random_day_demand:
        print('Electrical energy demand for one day in kWh: ')
        print(sum(el_load_obj.loadcurve[0:1440]) * timestep / (3600 * 1000))

    # Similarly, we can calculate the annual demand in kWh to ensure that it's
    # equal to 4973 kWh.
    if return_loads:
        return occ_profile_copy[0:timesteps], el_load_obj.loadcurve[0:timesteps]

# Run stoch_el_load to generate a stochastic profile for an entire year.
stoch_el_load(do_plot=True, lower_limit=0, upper_limit=8760)

# Set random_day_demand to 'True' in order to visualize one day. 
stoch_el_load(do_plot=True, random_day_demand=True)

"""#### **Question 1**

Run the function stoch_el_load() several times and make a table or list [S1,S2,S3,S4...] containing the electrical energy demand for one day [kWh] for each run. Please use supporting images for each profile. </br>

_a)  *How does the electrical energy demand for [S1, S2, S3, S4 ...] compare?*_

Now imagine this apartment is only one of a complex of 50 apartments. You would like to calculate the daily electrical demand and you are looking to select one occupancy profile. 

_b)   *For this particular case, what are the implications of using a static schedule versus a stochastic schedule?*_

#### **Question 2**

Stochastic occupancy models provide more information and are therefore always necessary to arrive at useful predictions.

_a) Now that you have explored both modelling techniques, do you agree with this statement? Support your arguments using existing literature. Use max. 500 words for your answer._

#### **3. Occupant Diversity**

Occupant behaviour is subject to inter-individual differences. As a result, the peak electricity demand in every household is not likely to occur simultaneously. This concept can be illustrated via the concept of coincidence, which shows how the uneven distribution of peak electrical demand is bound to reduce the relative peak demand as more and more profiles are aggregated. 

The _coincidence factor_ is equal to the peak of a system, divided by the sum of peak loads of its individual components. It shows how likely the individual components are to peak at the same time. The highest possible coincidence factor is 1, when all of the individual components peak at the same time.

The following example calculates the coincidence factor for a range of 1 to 10 studio apartments.
"""

# Let us create an array ranging from 1 to 10 apartments
apartments = np.arange(1, 11)
print(apartments)

from tqdm.auto import tqdm

# Here we generate occupancy and electricity profiles for the first day and 
# identify the peak load for each profile.

occ_profiles = [] # empty list for occupancy
el_profiles = [] # empty list for electricity
max_values = [] # empty list for peak values

for i in tqdm(apartments):
    occ_temp, el_temp = stoch_el_load(do_plot=False, return_loads=True) # note that we are calling 'stoch_el_load' again
    max_el = max(el_temp[0:1440])
    occ_profiles.append(occ_temp) # add values to list for occupancy
    el_profiles.append(el_temp) # add values to list for electricity
    max_values.append(max_el) # add values to list for peak values
    print('Peak load in W: ')
    print(max_el)

# Calculate the cumulative sum of all peak loads, which is necessary for the 
# calculation of the coincidence factor.

cluster_peak = np.cumsum(max_values)
print(cluster_peak)

# Calculate the coincidence factor for 1, 2, 3... i apartment clusters.

for i in apartments:
    coincidence_factors = max_values[0]/cluster_peak
    
print(coincidence_factors)

# In order to observe the effect that diversity has on electrical demand, we plot
# the coincidence factor as a function of apartment number.

# Bokeh is a visualization library that is used for interactive plotting.

from bokeh.plotting import figure, output_file, show
from bokeh.io import output_notebook
from bokeh.models import HoverTool

output_notebook()

tools = ["hover"]

p = figure(title="Coincidence Curve", plot_height=600, plot_width=600, x_axis_label = "Apartments [ ]",
       y_axis_label = "Coincidence Factor [ ]", tools=tools)

p.circle(apartments, coincidence_factors, size=10, color="black", hover_color="magenta")
p.line(apartments, coincidence_factors, color="black")

hover = p.select(dict(type=HoverTool))
hover.tooltips = [
    ("Apartments", "$x"),
    ("C Factor", "$y"),
]

show(p)

"""#### **Question 3**

Occupant diversity holds significant implications for energy demand and, thereby, building system sizing.

_a) *In the event of increased electrification of heating of the residential building stock (e.g. using heat pumps), how would you expect that the shape of the coincidence curve changes, and what does that mean for the sizing of network connections? What would be a possible solution? Answer this question in max. 500 words.*_
"""