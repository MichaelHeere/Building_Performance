# -*- coding: utf-8 -*-
"""Copy of Simulation data vs Analytical solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TJcZVJDeTJlzUYgaptaxmi-VLuPbmbKA
"""

import pandas as pd
import numpy as np
import datetime
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import csv

"""## Analytical result"""

# upload Exact_solution.xlsx
#uploaded = files.upload()
filename = 'Exact_solution.xlsx'

exact_data = pd.read_excel(filename, skiprows = 19)
exact_data = pd.concat([exact_data['h'], exact_data['Ts']], axis = 1).dropna()
exact_data = exact_data.set_index('h')
exact_data.at[0.0, 'Ts'] = 0

"""## Sim data

"""

# upload the simulation '.dat' file
filename = 'export2.dat'

with open(filename, encoding = 'utf-16') as f:
  sim_data = pd.read_csv(f, encoding = 'utf-16', sep = ',', header = None)
if len(sim_data.columns) == 4:
  sim_data.columns = ['parameter', 'timestamp', 'temperature', 'num']
  sim_data['temperature'] = sim_data['temperature'].apply(lambda x: str(x))
  sim_data['num'] = sim_data['num'].apply(lambda x: str(x))
  sim_data['temperature'] = sim_data['temperature'] + '.' + sim_data['num']
  sim_data['temperature'] = sim_data['temperature'].apply(lambda x: float(x))
elif len(sim_data.columns) == 3:
  sim_data.columns = ['parameter', 'timestamp', 'temperature']
else:
  raise Exception('Wrong format of the data file!')
sim_data = sim_data.set_index('timestamp')
sim_data = pd.DataFrame(sim_data['temperature'])

for i, temp in enumerate(list(sim_data['temperature'])):
  if i == 0:
    previous_temp = 0
    #previous_temp = float(temp)
  if float(temp) - previous_temp >= 3.72:
    origin = i - 1
    break
  else:
    previos_temp = float(temp)

# identifying the starting hour of the simulation
start_hour = sim_data.index[origin]
print(start_hour)

# enter the timestamps one hour before and five hours after the start hour
# example:
# start_hour = 1/5/2002 00:00
# before = '1/4/2002 23:00', after = '1/5/2002 05:00'
sim_data = sim_data.sort_index().truncate(before = '1/4/2002 23:00', after = '1/5/2002 05:00')

x = np.linspace(-1, 5, len(sim_data))
hour = pd.DataFrame(x)
hour.index = sim_data.index
sim_data = pd.concat([sim_data, hour], axis = 1)
sim_data.columns = ['temperature', 'h']
sim_data1 = sim_data.set_index('h')



'''second part'''
# upload the simulation '.dat' file
filename = 'export6.dat'

with open(filename, encoding = 'utf-16') as f:
  sim_data = pd.read_csv(f, encoding = 'utf-16', sep = ',', header = None)
if len(sim_data.columns) == 4:
  sim_data.columns = ['parameter', 'timestamp', 'temperature', 'num']
  sim_data['temperature'] = sim_data['temperature'].apply(lambda x: str(x))
  sim_data['num'] = sim_data['num'].apply(lambda x: str(x))
  sim_data['temperature'] = sim_data['temperature'] + '.' + sim_data['num']
  sim_data['temperature'] = sim_data['temperature'].apply(lambda x: float(x))
elif len(sim_data.columns) == 3:
  sim_data.columns = ['parameter', 'timestamp', 'temperature']
else:
  raise Exception('Wrong format of the data file!')
sim_data = sim_data.set_index('timestamp')
sim_data = pd.DataFrame(sim_data['temperature'])

for i, temp in enumerate(list(sim_data['temperature'])):
  if i == 0:
    previous_temp = 0
    #previous_temp = float(temp)
  if float(temp) - previous_temp >= 3.72:
    origin = i - 1
    break
  else:
    previos_temp = float(temp)

# identifying the starting hour of the simulation
start_hour = sim_data.index[origin]
print(start_hour)

# enter the timestamps one hour before and five hours after the start hour
# example:
# start_hour = 1/5/2002 00:00
# before = '1/4/2002 23:00', after = '1/5/2002 05:00'
sim_data = sim_data.sort_index().truncate(before = '1/4/2002 23:00', after = '1/5/2002 05:00')

x = np.linspace(-1, 5, len(sim_data))
hour = pd.DataFrame(x)
hour.index = sim_data.index
sim_data = pd.concat([sim_data, hour], axis = 1)
sim_data.columns = ['temperature', 'h']
sim_data2 = sim_data.set_index('h')



'''third measurement'''
# upload the simulation '.dat' file
filename = 'export30.dat'

with open(filename, encoding = 'utf-16') as f:
  sim_data = pd.read_csv(f, encoding = 'utf-16', sep = ',', header = None)
if len(sim_data.columns) == 4:
  sim_data.columns = ['parameter', 'timestamp', 'temperature', 'num']
  sim_data['temperature'] = sim_data['temperature'].apply(lambda x: str(x))
  sim_data['num'] = sim_data['num'].apply(lambda x: str(x))
  sim_data['temperature'] = sim_data['temperature'] + '.' + sim_data['num']
  sim_data['temperature'] = sim_data['temperature'].apply(lambda x: float(x))
elif len(sim_data.columns) == 3:
  sim_data.columns = ['parameter', 'timestamp', 'temperature']
else:
  raise Exception('Wrong format of the data file!')
sim_data = sim_data.set_index('timestamp')
sim_data = pd.DataFrame(sim_data['temperature'])

for i, temp in enumerate(list(sim_data['temperature'])):
  if i == 0:
    previous_temp = 0
    #previous_temp = float(temp)
  if float(temp) - previous_temp >= 3.72:
    origin = i - 1
    break
  else:
    previos_temp = float(temp)

# identifying the starting hour of the simulation
start_hour = sim_data.index[origin]
print(start_hour)

# enter the timestamps one hour before and five hours after the start hour
# example:
# start_hour = 1/5/2002 00:00
# before = '1/4/2002 23:00', after = '1/5/2002 05:00'
sim_data = sim_data.sort_index().truncate(before = '1/4/2002 23:00', after = '1/5/2002 05:00')

x = np.linspace(-1, 5, len(sim_data))
hour = pd.DataFrame(x)
hour.index = sim_data.index
sim_data = pd.concat([sim_data, hour], axis = 1)
sim_data.columns = ['temperature', 'h']
sim_data3 = sim_data.set_index('h')



'''error calculation'''
def errorcalc(inputdat):
    err = []
    inputdata = inputdat['temperature']
    l = [x for x in np.arange(0,4.5,0.5)]
    for i in range(len(inputdat)-5):
        err.append(exact_data['Ts'][l[i]]-inputdata[l[i]])
    return err
        
error1 = errorcalc(sim_data1)



# inputdata = sim_data1['temperature']
# exact_data['Ts'][4.605//len(inputdata)*i]-inputdata[i]


'''plotting'''
SMALL_SIZE = 18
MEDIUM_SIZE = 20
BIGGER_SIZE = 22

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title

ax = exact_data.plot(figsize = (20, 8))
sim_data1.plot(ax = ax, drawstyle = 'steps')
sim_data2.plot(ax = ax, drawstyle = 'steps')
sim_data3.plot(ax = ax, drawstyle = 'steps')
ax.grid()
ax.legend(['Analytical result', 'Simulation 1800s', 'Simulation 600s', 'Simulation 120s'])
ax.set_ylabel('Temperature (C)')
ax.set_xlabel('Time (h)')
plt.savefig('plot.png')

